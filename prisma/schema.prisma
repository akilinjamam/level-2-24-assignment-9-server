// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

// npx prisma migrate dev. this command to migrate prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Vendor {
  vendorId      String     @id @default(uuid()) @db.Uuid
  vendorName    String
  shopName      String
  details       String
  logo          String
  followedCount Int        @default(0)
  product       Products[]
  follows       Follow[]

  @@map("vendors")
}

model Products {
  productId   String   @id @default(uuid()) @db.Uuid
  productName String
  category    String
  price       Int
  details     String
  clicked     Int
  images      String[]
  vendorId    String   @db.Uuid
  vendor      Vendor   @relation(fields: [vendorId], references: [vendorId])
  Rating      Rating[]
  Review      Review[]

  @@map("products")
}

model User {
  userId      String   @id @default(uuid()) @db.Uuid
  userName    String
  email       String
  phoneNumber String
  address     String
  userType    UserType
  follows     Follow[]

  @@map("users")
}

model Follow {
  followId String @id @default(uuid()) @db.Uuid
  vendorId String @db.Uuid
  userId   String @db.Uuid
  vendor   Vendor @relation(fields: [vendorId], references: [vendorId])
  user     User   @relation(fields: [userId], references: [userId])

  @@unique([vendorId, userId])
  @@map("follows")
}

model Rating {
  rating    Int
  productId String   @id @default(uuid()) @db.Uuid
  product   Products @relation(fields: [productId], references: [productId])
}

model Review {
  review    String
  productId String   @id @default(uuid()) @db.Uuid
  product   Products @relation(fields: [productId], references: [productId])
}

enum UserType {
  USER
  VENDOR
}
